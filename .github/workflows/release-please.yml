name: Release Please

on:
  push:
    branches:
      - main

# Required permissions for release-please to create PRs and releases
permissions:
  contents: write          # Create releases and tags
  pull-requests: write     # Create and update pull requests
  issues: write            # Create and manage labels
  repository-projects: read # Read repository projects (required for v4)

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
      pr: ${{ steps.release.outputs.pr }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history including tags

      - name: Validate permissions
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîê Validating GitHub token permissions..."
          
          # Test basic repository access
          if gh repo view "${{ github.repository }}" > /dev/null 2>&1; then
            echo "‚úÖ Repository access: OK"
          else
            echo "‚ùå Repository access: FAILED"
            exit 1
          fi
          
          # Test PR list access
          if gh pr list --repo "${{ github.repository }}" --limit 1 > /dev/null 2>&1; then
            echo "‚úÖ Pull request read access: OK"
          else
            echo "‚ùå Pull request read access: FAILED"
            exit 1
          fi
          
          echo "üîê Permission validation completed"

      - name: Clean up stale release labels
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_DEBUG: api
        run: |
          echo "üßπ Cleaning up merged PRs with stale autorelease: pending labels"
          echo "üìä Debug info: Using token with permissions for repository: ${{ github.repository }}"
          
          # Remove autorelease: pending labels from merged PRs to prevent deadlock
          echo "üîç Searching for merged PRs with 'autorelease: pending' label..."
          pr_numbers=$(gh pr list --repo "${{ github.repository }}" --state merged --label "autorelease: pending" --json number | jq -r '.[] | .number')
          
          if [ -n "$pr_numbers" ]; then
            echo "üìã Found PRs to clean: $pr_numbers"
            for pr in $pr_numbers; do
              echo "üè∑Ô∏è  Attempting to remove label from merged PR #$pr"
              
              # Try with verbose error output and explicit repository specification
              if gh pr edit "$pr" --repo "${{ github.repository }}" --remove-label "autorelease: pending"; then
                echo "‚úÖ Successfully removed label from PR #$pr"
              else
                exit_code=$?
                echo "‚ùå Failed to remove label from PR #$pr (exit code: $exit_code)"
                echo "üîç Checking current labels on PR #$pr:"
                gh pr view "$pr" --repo "${{ github.repository }}" --json labels | jq -r '.labels[].name' || echo "Could not fetch labels"
                echo "‚ö†Ô∏è  This might be due to:"
                echo "   - Label already removed by another process"
                echo "   - Temporary API rate limiting"
                echo "   - Network connectivity issues"
                echo "   - PR may be in an unexpected state"
                echo "   - Repository access issues"
                echo "üîÑ Continuing with other PRs..."
              fi
            done
          else
            echo "‚ú® No merged PRs with stale autorelease: pending labels found"
          fi
          
          echo "üèÅ Label cleanup completed"

      - name: Validate release state
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Validating release state consistency..."
          
          # Get the latest version from manifest
          MANIFEST_VERSION=$(jq -r '.["." ]' .release-please-manifest.json)
          echo "üìã Manifest version: $MANIFEST_VERSION"
          
          # Check if GitHub release exists for this version
          if gh release view "v$MANIFEST_VERSION" > /dev/null 2>&1; then
            echo "‚úÖ GitHub release v$MANIFEST_VERSION exists"
          else
            echo "‚ö†Ô∏è  GitHub release v$MANIFEST_VERSION not found"
          fi
          
          # Check if git tag exists for this version
          if git rev-parse "v$MANIFEST_VERSION" > /dev/null 2>&1; then
            echo "‚úÖ Git tag v$MANIFEST_VERSION exists"
          else
            echo "‚ö†Ô∏è  Git tag v$MANIFEST_VERSION not found"
          fi
          
          echo "üîç Release state validation completed"

      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

  # Additional actions to run when a release is created
  post-release:
    needs: [release-please]
    runs-on: ubuntu-latest
    if: ${{ needs.release-please.outputs.release_created }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Post-release actions
        env:
          TAG_NAME: ${{ needs.release-please.outputs.tag_name }}
          VERSION: ${{ needs.release-please.outputs.version }}
        run: |
          echo "üéâ Release $TAG_NAME was created successfully!"
          echo "Version: $VERSION"
          echo "You can add additional post-release actions here, such as:"
          echo "- Building and uploading assets"
          echo "- Sending notifications"
          echo "- Updating documentation"
