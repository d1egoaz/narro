# Build and Release Narro macOS App
#
# This workflow handles building and releasing Narro for macOS
#
# Triggers:
#   - Automatic (tag push): Triggered by pushing tags starting with 'v' (e.g., v1.2.0)
#   - Manual (workflow_dispatch): Allows manual builds with optional tag name
#
# Features:
#   - Builds universal binary (Intel + Apple Silicon)
#   - Creates signed DMG (with proper certificates)
#   - Supports ad-hoc signing for development builds
#   - Generates checksums for verification
#   - Automatically creates GitHub releases

name: Build and Release Narro

on:
  push:
    tags: ['v*']
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for release (e.g., v1.2.0) - leave empty for build-only'
        required: false
        type: string

env:
  APP_NAME: "Narro"
  BUNDLE_ID: "ca.diegoa.narro"

permissions:
  contents: write

jobs:
  build:
    name: Build Narro
    runs-on: macos-15

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'

    - name: Setup Node.js (for create-dmg)
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install create-dmg
      run: npm install --global create-dmg

    - name: Extract version info
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
          # Tag push
          VERSION=${GITHUB_REF#refs/tags/}
          VERSION_NUMBER=${VERSION#v}
          IS_RELEASE=true
        elif [[ -n "${{ inputs.tag_name }}" ]]; then
          # Manual workflow with tag
          VERSION="${{ inputs.tag_name }}"
          VERSION_NUMBER=${VERSION#v}
          IS_RELEASE=true
        else
          # Regular build (PR or main branch)
          VERSION=$(cat version.txt)
          VERSION_NUMBER=$VERSION
          IS_RELEASE=false
        fi

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT
        echo "is_release=$IS_RELEASE" >> $GITHUB_OUTPUT

        echo "Building version: $VERSION_NUMBER"
        echo "Is release: $IS_RELEASE"

    - name: Cache Swift Package Manager
      uses: actions/cache@v4
      with:
        path: |
          .build
          ~/Library/Caches/org.swift.swiftpm
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-spm-

    - name: Build Debug (for PRs and main)
      if: steps.version.outputs.is_release == 'false'
      run: |
        echo "ðŸ”¨ Building Debug configuration..."
        xcodebuild \
          -project NarroApp.xcodeproj \
          -scheme NarroApp \
          -configuration Debug \
          -derivedDataPath .build \
          build

        echo "âœ… Debug build completed successfully"

    - name: Make build script executable
      if: steps.version.outputs.is_release == 'true'
      run: chmod +x scripts/build-dmg.sh

    - name: Build Release and Create DMG (skip signing)
      if: steps.version.outputs.is_release == 'true' && (!secrets.BUILD_CERTIFICATE_BASE64 || secrets.BUILD_CERTIFICATE_BASE64 == '')
      env:
        APP_NAME: ${{ env.APP_NAME }}
        BUNDLE_ID: ${{ env.BUNDLE_ID }}
        GITHUB_ACTIONS: true
        GITHUB_REF: refs/tags/${{ steps.version.outputs.version }}
        SKIP_SIGNING: true
      run: ./scripts/build-dmg.sh

    - name: Build Release and Create DMG (with signing)
      if: steps.version.outputs.is_release == 'true' && secrets.BUILD_CERTIFICATE_BASE64 != ''
      env:
        BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
        KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        APP_NAME: ${{ env.APP_NAME }}
        BUNDLE_ID: ${{ env.BUNDLE_ID }}
        GITHUB_ACTIONS: true
        GITHUB_REF: refs/tags/${{ steps.version.outputs.version }}
      run: ./scripts/build-dmg.sh

    - name: Upload build artifacts
      if: steps.version.outputs.is_release == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: narro-${{ steps.version.outputs.version_number }}
        path: |
          ${{ env.APP_NAME }}-${{ steps.version.outputs.version_number }}-Universal.dmg
          checksums.txt
        retention-days: 30
        if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && inputs.tag_name != '')

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract version info
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="${{ inputs.tag_name }}"
        fi
        VERSION_NUMBER=${VERSION#v}

        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "version_number=$VERSION_NUMBER" >> $GITHUB_OUTPUT

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: narro-${{ steps.version.outputs.version_number }}
        path: .

    - name: Generate Release Notes
      id: release_notes
      run: |
        VERSION="${{ steps.version.outputs.version }}"

        # Get the previous tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "^${VERSION}$" | head -n1)

        # Generate release notes
        cat > release_notes.md << 'EOF'
        ## Narro ${{ steps.version.outputs.version_number }}

        ### Installation

        Download the DMG file below and drag Narro to your Applications folder.

        **Requirements:**
        - macOS 14.0 or later
        - OpenAI API key

        ### What's Changed

        EOF

        # Add commit log if we have a previous tag
        if [ -n "$PREVIOUS_TAG" ]; then
          echo "Full Changelog: https://github.com/d1egoaz/narro/compare/${PREVIOUS_TAG}...${VERSION}" >> release_notes.md
        else
          echo "Full Changelog: https://github.com/d1egoaz/narro/commits/${VERSION}" >> release_notes.md
        fi

        # Add checksums
        echo "" >> release_notes.md
        echo "### Checksums" >> release_notes.md
        echo "" >> release_notes.md
        echo '```' >> release_notes.md
        cat checksums.txt >> release_notes.md
        echo '```' >> release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Narro ${{ steps.version.outputs.version_number }}
        body_path: release_notes.md
        draft: false
        prerelease: false
        files: |
          ${{ env.APP_NAME }}-${{ steps.version.outputs.version_number }}-Universal.dmg
          checksums.txt
        token: ${{ secrets.GITHUB_TOKEN }}
        fail_on_unmatched_files: true

    - name: Release Success
      if: success()
      run: |
        echo "ðŸŽ‰ Release ${{ steps.version.outputs.version }} has been published!"
        echo "ðŸ”— View release: https://github.com/d1egoaz/narro/releases/tag/${{ steps.version.outputs.version }}"
        echo "ðŸ“¦ Download DMG: https://github.com/d1egoaz/narro/releases/download/${{ steps.version.outputs.version }}/${{ env.APP_NAME }}-${{ steps.version.outputs.version_number }}-Universal.dmg"
